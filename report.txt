Name: Rachel Chan
UID: 306280535

1) A brief description of notable obstacles you overcame.

The first problem I encountered was not knowing what white space to write after a word, especially since there are edge scenarios where white spaces are not printed depending on the next word (i.e. punctuation is not followed by 2 spaces if the word containing the punctuation is the last word printed in that current line). Because of this, I had to change my algorithm so it would prepend spaces and paragraph breaks, rather than append. After that, I encountered problems with catching edge cases. There were multiple times throughout the project where I thought I was finished, but I would run a test case and realize my code didn't accommodate for it. I solved this problem by testing my code a repeatedly and tweaking it after each test case that it fails.

2) A description of the design of your project. 

A. RENDER() PSEUDOCODE
if(line length < 1)
	return 2
repeatedly:
	append char by char to a cstring
	if the loop reaches a space
		break
call and pass the cstring into printWord()
reset word into all zero bytes
if last token is not a space or paragraph break
	call and pass the last token into printWord()
print new line

B. PRINTWORD() PSEUDOCODE
declare int spaces as 1
if currently printing word portions but not the first portion, spaces = 0
if previous word has punctuation, spaces = 2
if this will be the first word in the current line, spaces = 0
if previous token is a paragraph break AND current token is not, then print 2 new lines
elif count and spaces can fit in current line
	print spaces and word in the current line
elif count and spaces perfectly complete current line
	print spaces and word in current line
	print new line
else count and spaces don't fit
	call printWordPortions() if moreThanOneWordPortion() returns true
	if the word is greater than the line length
		set the returnOne boolean to true to tell the program to return 1 at the end 
		print new line
		print max line length number of chars from the word
		call and pass printWordPortions() with a cstring that stores the remaining, unprinted chars
	else print a new line and print the word in the next line
if current word ends with a punctuation mark
	set the hasPunc boolean to true to tell the program to prepend 2 spaces on the next token

C. PRINTWORDPORTIONS() PSEUDOCODE
repeatedly until all chars in the word have been iterated through:
	append chars to a cstring until a zero byte or dash (including the dash)
	call and pass the cstring holding the word portion into printWords()
	reset word portion to all zero bytes

D. MORETHANONEWORDPORTION() PSEUDOCODE
iterates through each char in the cstring
	if char is a hyphen
		return true
return false

3) A list of the test data that could be used to thoroughly test your function, along with the reason for each test case

testRender(10, "\n", "", 0); // input is empty line
testRender(10, " ", "", 0); // input is empty space
// Error Cases
testRender(3, "one two three", "one\ntwo\nthr\nee\n", 1); // input word longer than max length
testRender(6, "hello-there and good-bye", "hello-\nthere\nand\ngood-\nbye\n", 0); // input word longer than max length but individual word portions are not
testRender(4, "hello-you\n\ngoodbye-you", "hell\no-\nyou\ngood\nbye-\nyou\n", 1); // word portions are longer than max length
testRender(0, "boo!", "", 2); // desired maximum length is < 1
// Punctuation
testRender(10, "!", "!\n", 0); // input is a singular punctuation mark
testRender(6, ".?!:", ".?!:\n", 0); // ends and starts with a punctuation mark (should not have spaces at beginning or the end)
testRender(6, ". ? ! : ", ".  ?\n!  :\n", 0); // testing all punctuation marks specified in the spec
// Paragraph Breaks
testRender(10, "@P@", "", 0); // input is a paragraph break
testRender(12, ".banjo@P@.", ".banjo@P@.\n", 0); // paragraph break is incorporated in a word (does not count!)
testRender(6, "@P@ Hello @P@ Bye @P@", "Hello\n\nBye\n", 0); // leading and ending paragraph breaks
testRender(6, "@P@@P@", "@P@@P@\n", 0); // @P@@P@ should be treated as a word, not a paragraph break
testRender(4, "@P@ @P@ @P@ @P@", "", 0); // contains only repeated paragraph breaks
testRender(2, "hi @P@ hi", "hi\n\nhi\n", 0); // @P@ should have no length
testRender(3, "@P@-@P@", "@P@\n-\n@P@\n", 1); // @P@ should be treated as a word portion, not a word
testRender(10, "hi\n\n@P@ bye", "hi\n\nbye\n", 0); // paragraph break with new lines
// Hyphen
testRender(10, "-", "-\n", 0); // input is a hyphen
testRender(10, "hi!--!-december", "hi!--!-\ndecember\n", 0); // punctuation included inside word portion
testRender(2, "---------", "--\n--\n--\n--\n-\n", 0); // input has consecutive hyphens
testRender(3, "-a-a-a-a-a", "-a-\na-\na-\na-a\n", 0); // input is a large word portion with multiple hyphens
testRender(10, "Thames so-called Henley-on-Thames so--called so- -so", "Thames so-\ncalled\nHenley-on-\nThames so-\n-called\nso- -so\n", 0); //  includes all pathological examples of word portions from smallberg's spec
testRender(20, "Here's a wild mix of dashes-connecting ideas in a jumble-making a merry mess-of words and thoughts-like a crazy puzzle-full of dashes-jumping around-just for fun!", "Here's a wild mix of\ndashes-connecting\nideas in a jumble-\nmaking a merry mess-\nof words and\nthoughts-like a\ncrazy puzzle-full of\ndashes-jumping\naround-just for fun!\n", 0); // multiple word portions broken at a hyphen to fit on an output line
testRender(6, "@P@ @P@ @P@\n\neric-chou\nhello\n@P@\nalsdjf-j--j\nsevens-fives\nhi fives\n\n\n@P@\nfives-bye\n\n\n", "eric-\nchou\nhello\n\nalsdjf\n-j--j\nsevens\n-fives\nhi\nfives\n\nfives-\nbye\n", 1); // multiple split word portions AND paragraph breaks
// Exceeds Maximum Line Length
testRender(5, "i'm rach-chan", "i'm\nrach-\nchan\n", 0); // overflow word with hyphen
testRender(6, "i'm rachchan", "i'm\nrachch\nan\n", 1); // overflow word without hyphen
testRender(6, "oopsiesdaises! my-bad", "oopsie\nsdaise\ns!\nmy-bad\n", 1); // overflow word includes punctuation
testRender(6, "crashlandingonyouisaveryverygoodshow", "crashl\nanding\nonyoui\nsavery\nverygo\nodshow\n", 1); // input line length is a multiple of the max line length
testRender(7, "crashlandingonyouisaveryverygoodshow", "crashla\nndingon\nyouisav\neryvery\ngoodsho\nw\n", 1); // input line length is not a multiple of max line length
testRender(20, "@P@ @P@ @P@ @P@- -@P@World! -@P@ !-@P@ Hello-@P@-World.", "@P@- -@P@World!  -\n@P@ !-@P@ Hello-@P@-\nWorld.\n", 0); // overflow word has a hyphen and can be split into word portions
testRender(7, "zen-me-le- - ni-hao-bu-hao", "zen-me-\nle- -\nni-hao-\nbu-hao\n", 0); // word length exceeds maximum line length but word portion lengths do not (should split the word portions and NOT return 1)
// More Complex Test Cases
testRender(1, "h-i! @P@ ya-y!. @P@", "h\n-\ni\n!\n\ny\na\n-\ny\n!\n.\n", 1); // line length is 1
testRender(10, "!: . @P@ laj-jal3-ncl-  \neric-chou . . !@P@\n\n@P@  \n\n. -\n\n-- -.-?- \nhello-my-name-is-rachel-this-project-is-hard\n\n@P@ @P@ @P@\n\n", "!:  .\n\nlaj-jal3-\nncl- eric-\nchou .  .\n!@P@\n\n.  - -- -\n.-?-\nhello-my-\nname-is-\nrachel-\nthis-\nproject-\nis-hard\n", 0); // combination of punctuation, paragraph breaks, and hyphens
testRender(4, "forrestgump once-said life-is likea boxofchocolates", "forr\nestg\nump\nonce\n-\nsaid\nlife\n-is\nlike\na\nboxo\nfcho\ncola\ntes\n", 1); // combination of overflow words AND hyphens
testRender(20, "@P@ Once-upon a-time. . . -in-a- \n faraway? land: @P@ there--lived-a- curious-fox @P@ \n The-real--treasure- is- the adventures! you- embrace.", "Once-upon a-time.  .\n.  -in-a- faraway?\nland:\n\nthere--lived-a-\ncurious-fox\n\nThe-real--treasure-\nis- the adventures!\nyou- embrace.\n", 0); // combination of punctuation, paragraph breaks, hyphens, and new lines
testRender(37, "On-ce, a cu-ri-ous fox roa-med fa-ra-wa-y lands @P@ see-king ad-ven-tures. Am-id-st fo-re-sts and va-lle-ys, he st-umb-led up-on an an-ci-ent map @P@ ex-ci-te-ment sur-g-ed wit-hin. Off he das-h-ed, see-king hid-de-n trea-su-res mar-k-ed on the map @P@ thr-ou-gh tho-rny bu-sh-es and wi-nd-ing ri-ve-rs. His jou-rney led to a gli-mme-ring chest @P@ ea-ge-rly o-pe-ning it, he found not go-ld or ge-ms, but a no-te that re-ad, The re-al trea-su-re is the ad-ven-tu-res you e-mbra-ce. @P@ With a chu-ck-le, he re-al-iz-ed the tru-e va-lu-e of his jou-rney and co-nti-nu-ed ex-plor-ing the wo-rld with gle-e.", "On-ce, a cu-ri-ous fox roa-med fa-ra-\nwa-y lands\n\nsee-king ad-ven-tures.  Am-id-st fo-\nre-sts and va-lle-ys, he st-umb-led\nup-on an an-ci-ent map\n\nex-ci-te-ment sur-g-ed wit-hin.  Off\nhe das-h-ed, see-king hid-de-n trea-\nsu-res mar-k-ed on the map\n\nthr-ou-gh tho-rny bu-sh-es and wi-nd-\ning ri-ve-rs.  His jou-rney led to a\ngli-mme-ring chest\n\nea-ge-rly o-pe-ning it, he found not\ngo-ld or ge-ms, but a no-te that re-\nad, The re-al trea-su-re is the ad-\nven-tu-res you e-mbra-ce.\n\nWith a chu-ck-le, he re-al-iz-ed the\ntru-e va-lu-e of his jou-rney and co-\nnti-nu-ed ex-plor-ing the wo-rld with\ngle-e.\n", 0); // extra credit: long input line with over 250 characters
